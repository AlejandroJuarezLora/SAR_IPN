/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "sarlogic.v:2" *)
module sar_logic(clk, rstn, en, comp, cal, valid, result, sample, ctlp, ctln, trim, trimb, clkc);
  (* src = "sarlogic.v:48" *)
  wire [3:0] _000_;
  (* src = "sarlogic.v:48" *)
  wire [3:0] _001_;
  (* src = "sarlogic.v:48" *)
  wire _002_;
  (* src = "sarlogic.v:48" *)
  wire _003_;
  (* src = "sarlogic.v:48" *)
  wire [7:0] _004_;
  (* src = "sarlogic.v:48" *)
  wire [7:0] _005_;
  (* src = "sarlogic.v:48" *)
  wire [2:0] _006_;
  (* src = "sarlogic.v:48" *)
  wire [4:0] _007_;
  (* src = "sarlogic.v:48" *)
  wire [4:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  (* src = "sarlogic.v:7" *)
  input cal;
  (* init = 4'h7 *)
  (* src = "sarlogic.v:26" *)
  reg [3:0] cal_count = 4'h7;
  (* init = 4'h0 *)
  (* src = "sarlogic.v:27" *)
  reg [3:0] cal_itt = 4'h0;
  (* init = 1'h0 *)
  (* src = "sarlogic.v:17" *)
  reg calibrate = 1'h0;
  (* src = "sarlogic.v:3" *)
  input clk;
  (* src = "sarlogic.v:15" *)
  output clkc;
  (* src = "sarlogic.v:24" *)
  wire co_clk;
  (* src = "sarlogic.v:6" *)
  input comp;
  (* src = "sarlogic.v:12" *)
  output [7:0] ctln;
  (* src = "sarlogic.v:11" *)
  output [7:0] ctlp;
  (* src = "sarlogic.v:5" *)
  input en;
  (* init = 1'h0 *)
  (* src = "sarlogic.v:25" *)
  reg en_co_clk = 1'h0;
  (* init = 8'h00 *)
  (* src = "sarlogic.v:19" *)
  reg [7:0] mask = 8'h00;
  (* init = 8'h00 *)
  (* src = "sarlogic.v:9" *)
  output [7:0] result;
  reg [7:0] result = 8'h00;
  (* src = "sarlogic.v:4" *)
  input rstn;
  (* src = "sarlogic.v:10" *)
  output sample;
  (* init = 3'h0 *)
  (* src = "sarlogic.v:18" *)
  reg [2:0] state = 3'h0;
  (* src = "sarlogic.v:13" *)
  output [4:0] trim;
  (* init = 5'h00 *)
  (* src = "sarlogic.v:20" *)
  reg [4:0] trim_mask = 5'h00;
  (* init = 5'h00 *)
  (* src = "sarlogic.v:22" *)
  reg [4:0] trim_val = 5'h00;
  (* src = "sarlogic.v:14" *)
  output [4:0] trimb;
  (* src = "sarlogic.v:8" *)
  output valid;
  assign ctlp[4] = ~ctln[4];
  assign ctln[5] = ~(result[5] | mask[5]);
  assign ctlp[5] = ~ctln[5];
  assign ctln[6] = ~(result[6] | mask[6]);
  assign ctlp[6] = ~ctln[6];
  assign ctln[7] = ~(result[7] | mask[7]);
  assign ctlp[7] = ~ctln[7];
  assign _013_ = state[2] & ~(_010_);
  assign _014_ = _010_ | state[2];
  assign _015_ = _014_ & ~(_013_);
  assign _016_ = ~_013_;
  assign _017_ = ~(trim_mask[0] & cal_itt[0]);
  assign _018_ = cal_itt[1] & cal_itt[0];
  assign _019_ = cal_itt[3] | ~(cal_itt[2]);
  assign _020_ = _019_ | ~(_018_);
  assign _021_ = _020_ ? cal_itt[0] : _017_;
  assign _022_ = en | ~(cal_itt[0]);
  assign _023_ = ~((_022_ | _014_) & (_021_ | _016_));
  assign _001_[0] = _015_ ? cal_itt[0] : _023_;
  assign _024_ = _018_ & ~(_019_);
  assign _025_ = ~(cal_itt[1] & trim_mask[0]);
  assign _026_ = ~(cal_itt[1] ^ cal_itt[0]);
  assign _027_ = _024_ ? _025_ : _026_;
  assign _028_ = en | ~(cal_itt[1]);
  assign _029_ = ~((_028_ | _014_) & (_027_ | _016_));
  assign _001_[1] = _015_ ? cal_itt[1] : _029_;
  assign _030_ = ~(cal_itt[2] & trim_mask[0]);
  assign _031_ = ~(_018_ ^ cal_itt[2]);
  assign _032_ = _024_ ? _030_ : _031_;
  assign _033_ = en | ~(cal_itt[2]);
  assign _034_ = ~((_033_ | _014_) & (_032_ | _016_));
  assign _001_[2] = _015_ ? cal_itt[2] : _034_;
  assign _035_ = trim_mask[0] & cal_itt[3];
  assign _036_ = ~cal_itt[3];
  assign _037_ = ~((_018_ & cal_itt[2]) | _036_);
  assign _038_ = ~((_035_ & _024_) | _037_);
  assign _039_ = en | ~(cal_itt[3]);
  assign _040_ = ~((_039_ | _014_) & (_038_ | _016_));
  assign _001_[3] = _015_ ? cal_itt[3] : _040_;
  assign _041_ = cal_count[0] | comp;
  assign _042_ = comp & ~(cal_count[0]);
  assign _043_ = _041_ & ~(_042_);
  assign _044_ = _043_ & ~(_024_);
  assign _045_ = ~(cal_count[0] | en);
  assign _046_ = ~((_045_ | _014_) & (_044_ | _016_));
  assign _000_[0] = _015_ ? cal_count[0] : _046_;
  assign _047_ = ~(cal_count[1] ^ cal_count[0]);
  assign _048_ = cal_count[1] ^ cal_count[0];
  assign _049_ = comp ? _048_ : _047_;
  assign _050_ = _049_ & ~(_024_);
  assign _051_ = ~(cal_count[1] | en);
  assign _052_ = ~((_051_ | _014_) & (_050_ | _016_));
  assign _000_[1] = _015_ ? cal_count[1] : _052_;
  assign _053_ = ~(cal_count[1] & cal_count[0]);
  assign _054_ = _053_ ^ cal_count[2];
  assign _055_ = cal_count[1] | cal_count[0];
  assign _056_ = _055_ ^ cal_count[2];
  assign _057_ = comp ? _056_ : _054_;
  assign _058_ = ~((_057_ & _020_) | _016_);
  assign _059_ = ~en;
  assign _060_ = ~cal_count[2];
  assign _061_ = ~((_060_ & _059_) | _014_);
  assign _062_ = _061_ | _058_;
  assign _000_[2] = _015_ ? cal_count[2] : _062_;
  assign _063_ = ~cal_count[3];
  assign _064_ = cal_count[2] & ~(_053_);
  assign _065_ = _064_ ^ _063_;
  assign _066_ = _060_ & ~(_055_);
  assign _067_ = _066_ ^ _063_;
  assign _068_ = comp ? _067_ : _065_;
  assign _069_ = _068_ | _024_;
  assign _070_ = en | ~(cal_count[3]);
  assign _071_ = ~((_070_ | _014_) & (_069_ | _016_));
  assign _000_[3] = _015_ ? cal_count[3] : _071_;
  assign _072_ = ~(state[1] & state[0]);
  assign _073_ = ~((_072_ | state[2]) & _010_);
  assign _074_ = _072_ | state[2];
  assign _075_ = ~trim_mask[0];
  assign _076_ = ~((_020_ | _075_) & en_co_clk);
  assign _077_ = mask[0] | ~(en_co_clk);
  assign _078_ = ~((_077_ | _074_) & (_076_ | _016_));
  assign _079_ = en_co_clk | en;
  assign _080_ = _079_ & ~(_014_);
  assign _081_ = _080_ | _078_;
  assign _003_ = _073_ ? _081_ : en_co_clk;
  assign _082_ = ~(_009_ | state[2]);
  assign _083_ = _012_ & ~(_082_);
  assign _084_ = _011_ | state[2];
  assign _085_ = ~trim_val[0];
  assign _086_ = cal_count[3] | cal_count[2];
  assign _087_ = cal_count[2] & ~(cal_count[3]);
  assign _088_ = _086_ & ~(_087_);
  assign _089_ = _088_ ? trimb[0] : _085_;
  assign _090_ = _020_ ? _085_ : _089_;
  assign _091_ = calibrate | ~(trim_val[0]);
  assign _092_ = ~((_091_ | _084_) & (_090_ | _016_));
  assign _008_[0] = _083_ ? trim_val[0] : _092_;
  assign _093_ = ~trim_val[1];
  assign _094_ = _088_ ? trimb[1] : _093_;
  assign _095_ = _020_ ? _093_ : _094_;
  assign _096_ = calibrate | ~(trim_val[1]);
  assign _097_ = ~((_096_ | _084_) & (_095_ | _016_));
  assign _008_[1] = _083_ ? trim_val[1] : _097_;
  assign _098_ = ~trim_val[2];
  assign _099_ = _088_ ? trimb[2] : _098_;
  assign _100_ = _020_ ? _098_ : _099_;
  assign _101_ = calibrate | ~(trim_val[2]);
  assign _102_ = ~((_101_ | _084_) & (_100_ | _016_));
  assign _008_[2] = _083_ ? trim_val[2] : _102_;
  assign _103_ = ~trim_val[3];
  assign _104_ = _088_ ? trimb[3] : _103_;
  assign _105_ = _020_ ? _103_ : _104_;
  assign _106_ = calibrate | ~(trim_val[3]);
  assign _107_ = ~((_106_ | _084_) & (_105_ | _016_));
  assign _008_[3] = _083_ ? trim_val[3] : _107_;
  assign _108_ = ~trim_val[4];
  assign _109_ = _088_ ? trimb[4] : _108_;
  assign _110_ = _020_ ? _108_ : _109_;
  assign _111_ = calibrate | ~(trim_val[4]);
  assign _112_ = ~((_111_ | _084_) & (_110_ | _016_));
  assign _113_ = _112_ | _082_;
  assign _008_[4] = _083_ ? trim_val[4] : _113_;
  assign _114_ = ~trim_mask[1];
  assign _115_ = _020_ ? _075_ : _114_;
  assign _116_ = calibrate | ~(trim_mask[0]);
  assign _117_ = ~((_116_ | _084_) & (_115_ | _016_));
  assign _007_[0] = _012_ ? trim_mask[0] : _117_;
  assign _118_ = ~trim_mask[2];
  assign _119_ = _020_ ? _114_ : _118_;
  assign _120_ = calibrate | ~(trim_mask[1]);
  assign _121_ = ~((_120_ | _084_) & (_119_ | _016_));
  assign _007_[1] = _012_ ? trim_mask[1] : _121_;
  assign _122_ = ~trim_mask[3];
  assign _123_ = _020_ ? _118_ : _122_;
  assign _124_ = calibrate | ~(trim_mask[2]);
  assign _125_ = ~((_124_ | _084_) & (_123_ | _016_));
  assign _007_[2] = _012_ ? trim_mask[2] : _125_;
  assign _126_ = ~trim_mask[4];
  assign _127_ = _020_ ? _122_ : _126_;
  assign _128_ = calibrate | ~(trim_mask[3]);
  assign _129_ = ~((_128_ | _084_) & (_127_ | _016_));
  assign _007_[3] = _012_ ? trim_mask[3] : _129_;
  assign _130_ = _024_ | _126_;
  assign _131_ = ~(trim_mask[4] | calibrate);
  assign _132_ = ~((_131_ | _084_) & (_130_ | _016_));
  assign _007_[4] = _012_ ? trim_mask[4] : _132_;
  assign _133_ = state[2] | ~(state[0]);
  assign _134_ = ~mask[1];
  assign _135_ = en | ~(mask[0]);
  assign _136_ = ~((_135_ | _014_) & (_074_ | _134_));
  assign _004_[0] = _133_ ? mask[0] : _136_;
  assign _137_ = ~mask[2];
  assign _138_ = en | ~(mask[1]);
  assign _139_ = ~((_138_ | _014_) & (_074_ | _137_));
  assign _004_[1] = _133_ ? mask[1] : _139_;
  assign _140_ = ~mask[3];
  assign _141_ = en | ~(mask[2]);
  assign _142_ = ~((_141_ | _014_) & (_074_ | _140_));
  assign _004_[2] = _133_ ? mask[2] : _142_;
  assign _143_ = ~mask[4];
  assign _144_ = en | ~(mask[3]);
  assign _145_ = ~((_144_ | _014_) & (_074_ | _143_));
  assign _004_[3] = _133_ ? mask[3] : _145_;
  assign _146_ = ~mask[5];
  assign _147_ = en | ~(mask[4]);
  assign _148_ = ~((_147_ | _014_) & (_074_ | _146_));
  assign _004_[4] = _133_ ? mask[4] : _148_;
  assign _149_ = ~mask[6];
  assign _150_ = en | ~(mask[5]);
  assign _151_ = ~((_150_ | _014_) & (_074_ | _149_));
  assign _004_[5] = _133_ ? mask[5] : _151_;
  assign _152_ = ~mask[7];
  assign _153_ = en | ~(mask[6]);
  assign _154_ = ~((_153_ | _014_) & (_074_ | _152_));
  assign _004_[6] = _133_ ? mask[6] : _154_;
  assign _155_ = ~((_152_ & _059_) | _014_);
  assign _004_[7] = _133_ ? mask[7] : _155_;
  assign _156_ = _082_ | valid;
  assign _157_ = _156_ | _013_;
  assign _158_ = ~(_074_ & _084_);
  assign _159_ = _158_ | _157_;
  assign _160_ = _014_ & ~(_159_);
  assign _161_ = _020_ ? state[0] : _075_;
  assign _162_ = ~((_161_ & _013_) | _156_);
  assign _163_ = mask[0] | ~(state[0]);
  assign _164_ = ~((_163_ | _074_) & _084_);
  assign _165_ = _162_ & ~(_164_);
  assign _166_ = ~((_014_ | en) & _165_);
  assign _006_[0] = _160_ ? state[0] : _166_;
  assign _167_ = state[1] & ~(_024_);
  assign _168_ = mask[0] | ~(state[1]);
  assign _169_ = ~((_168_ | _074_) & (_084_ | calibrate));
  assign _170_ = ~((_167_ & _013_) | _169_);
  assign _171_ = ~((_014_ | _059_) & _170_);
  assign _006_[1] = _160_ ? state[1] : _171_;
  assign _172_ = ~calibrate;
  assign _173_ = ~(mask[0] | state[2]);
  assign _174_ = ~((_173_ | _074_) & (_084_ | _172_));
  assign _175_ = _174_ | _013_;
  assign _006_[2] = _160_ ? state[2] : _175_;
  assign _176_ = ~((_020_ | _075_) & calibrate);
  assign _177_ = ~cal;
  assign _178_ = en ? _177_ : _172_;
  assign _179_ = ~((_178_ | _014_) & (_176_ | _016_));
  assign _002_ = _015_ ? calibrate : _179_;
  assign _180_ = ~((mask[0] & comp) | result[0]);
  assign _181_ = en | ~(result[0]);
  assign _182_ = ~((_181_ | _014_) & (_180_ | _074_));
  assign _005_[0] = _133_ ? result[0] : _182_;
  assign _183_ = ~((mask[1] & comp) | result[1]);
  assign _184_ = en | ~(result[1]);
  assign _185_ = ~((_184_ | _014_) & (_183_ | _074_));
  assign _005_[1] = _133_ ? result[1] : _185_;
  assign _186_ = ~((mask[2] & comp) | result[2]);
  assign _187_ = en | ~(result[2]);
  assign _188_ = ~((_187_ | _014_) & (_186_ | _074_));
  assign _005_[2] = _133_ ? result[2] : _188_;
  assign _189_ = ~((mask[3] & comp) | result[3]);
  assign _190_ = en | ~(result[3]);
  assign _191_ = ~((_190_ | _014_) & (_189_ | _074_));
  assign _005_[3] = _133_ ? result[3] : _191_;
  assign _192_ = ~((mask[4] & comp) | result[4]);
  assign _193_ = en | ~(result[4]);
  assign _194_ = ~((_193_ | _014_) & (_192_ | _074_));
  assign _005_[4] = _133_ ? result[4] : _194_;
  assign _195_ = ~((mask[5] & comp) | result[5]);
  assign _196_ = en | ~(result[5]);
  assign _197_ = ~((_196_ | _014_) & (_195_ | _074_));
  assign _005_[5] = _133_ ? result[5] : _197_;
  assign _198_ = ~((mask[6] & comp) | result[6]);
  assign _199_ = en | ~(result[6]);
  assign _200_ = ~((_199_ | _014_) & (_198_ | _074_));
  assign _005_[6] = _133_ ? result[6] : _200_;
  assign _201_ = ~((mask[7] & comp) | result[7]);
  assign _202_ = en | ~(result[7]);
  assign _203_ = ~((_202_ | _014_) & (_201_ | _074_));
  assign _005_[7] = _133_ ? result[7] : _203_;
  assign clkc = en_co_clk & ~(clk);
  assign _009_ = state[1] | state[0];
  assign valid = state[2] & ~(_009_);
  assign _010_ = state[1] | ~(state[0]);
  assign _011_ = state[0] | ~(state[1]);
  assign _012_ = state[2] ? _010_ : _011_;
  assign sample = ~_012_;
  assign trimb[0] = ~(trim_val[0] | trim_mask[0]);
  assign trim[0] = ~trimb[0];
  assign trimb[1] = ~(trim_mask[1] | trim_val[1]);
  assign trim[1] = ~trimb[1];
  assign trimb[2] = ~(trim_mask[2] | trim_val[2]);
  assign trim[2] = ~trimb[2];
  assign trimb[3] = ~(trim_mask[3] | trim_val[3]);
  assign trim[3] = ~trimb[3];
  assign trimb[4] = ~(trim_mask[4] | trim_val[4]);
  assign trim[4] = ~trimb[4];
  assign ctln[0] = ~(result[0] | mask[0]);
  assign ctlp[0] = ~ctln[0];
  assign ctln[1] = ~(result[1] | mask[1]);
  assign ctlp[1] = ~ctln[1];
  assign ctln[2] = ~(result[2] | mask[2]);
  assign ctlp[2] = ~ctln[2];
  assign ctln[3] = ~(result[3] | mask[3]);
  assign ctlp[3] = ~ctln[3];
  assign ctln[4] = ~(result[4] | mask[4]);
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[0] <= 0;
    else
      result[0] <= _005_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[1] <= 0;
    else
      result[1] <= _005_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[2] <= 0;
    else
      result[2] <= _005_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[3] <= 0;
    else
      result[3] <= _005_[3];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[4] <= 0;
    else
      result[4] <= _005_[4];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[5] <= 0;
    else
      result[5] <= _005_[5];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[6] <= 0;
    else
      result[6] <= _005_[6];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      result[7] <= 0;
    else
      result[7] <= _005_[7];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      calibrate <= 0;
    else
      calibrate <= _002_;
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      state[0] <= 0;
    else
      state[0] <= _006_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      state[1] <= 0;
    else
      state[1] <= _006_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      state[2] <= 0;
    else
      state[2] <= _006_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[0] <= 0;
    else
      mask[0] <= _004_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[1] <= 0;
    else
      mask[1] <= _004_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[2] <= 0;
    else
      mask[2] <= _004_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[3] <= 0;
    else
      mask[3] <= _004_[3];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[4] <= 0;
    else
      mask[4] <= _004_[4];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[5] <= 0;
    else
      mask[5] <= _004_[5];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[6] <= 0;
    else
      mask[6] <= _004_[6];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      mask[7] <= 0;
    else
      mask[7] <= _004_[7];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_mask[0] <= 0;
    else
      trim_mask[0] <= _007_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_mask[1] <= 0;
    else
      trim_mask[1] <= _007_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_mask[2] <= 0;
    else
      trim_mask[2] <= _007_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_mask[3] <= 0;
    else
      trim_mask[3] <= _007_[3];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_mask[4] <= 0;
    else
      trim_mask[4] <= _007_[4];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_val[0] <= 0;
    else
      trim_val[0] <= _008_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_val[1] <= 0;
    else
      trim_val[1] <= _008_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_val[2] <= 0;
    else
      trim_val[2] <= _008_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_val[3] <= 0;
    else
      trim_val[3] <= _008_[3];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      trim_val[4] <= 0;
    else
      trim_val[4] <= _008_[4];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      en_co_clk <= 0;
    else
      en_co_clk <= _003_;
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_count[0] <= 1;
    else
      cal_count[0] <= _000_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_count[1] <= 1;
    else
      cal_count[1] <= _000_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_count[2] <= 1;
    else
      cal_count[2] <= _000_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_count[3] <= 0;
    else
      cal_count[3] <= _000_[3];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_itt[0] <= 0;
    else
      cal_itt[0] <= _001_[0];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_itt[1] <= 0;
    else
      cal_itt[1] <= _001_[1];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_itt[2] <= 0;
    else
      cal_itt[2] <= _001_[2];
  (* src = "sarlogic.v:48" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      cal_itt[3] <= 0;
    else
      cal_itt[3] <= _001_[3];
  assign co_clk = 1'h0;
endmodule
